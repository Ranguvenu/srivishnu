{"version":3,"sources":["../src/popup.js"],"names":["define","dataTable","$","Str","ModalFactory","ModalEvents","Fragment","NewPopup","selector","contextid","categoryid","categoryname","self","init","prototype","modal","click","editid","data","get_string","then","create","type","types","CANCEL","title","body","getBody","bind","show","setLarge","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","args","Datatable"],"mappings":"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","sourcesContent":["/**\r\n * Add a create new group modal to the page.\r\n *\r\n * @module     local_courses/newcourse\r\n * @class      NewCourse\r\n * @package    local_courses\r\n * @copyright  2017 Shivani\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['local_courses/jquery.dataTables', 'jquery', 'core/str', 'core/modal_factory', 'core/modal_events',\r\n        'core/fragment', 'core/ajax', 'core/yui', 'jqueryui'],\r\n        function(dataTable, $, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\r\n \r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @param {int} contextid\r\n     *\r\n     * Each call to init gets it's own instance of this class.\r\n     */\r\n    var NewPopup = function(selector, contextid, categoryid,categoryname) {\r\n        \r\n        this.contextid = contextid;\r\n        this.categoryid = categoryid;\r\n        this.categoryname = categoryname;\r\n        // alert(categoryname);\r\n        var self = this;\r\n        self.init(selector);\r\n    };\r\n \r\n    /**\r\n     * @var {Modal} modal\r\n     * @private\r\n     */\r\n    NewPopup.prototype.modal = null;\r\n \r\n    /**\r\n     * @var {int} contextid\r\n     * @private\r\n     */\r\n    NewPopup.prototype.contextid = -1;\r\n \r\n    /**\r\n     * Initialise the class.\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewPopup.prototype.init = function(selector) {\r\n        //var triggers = $(selector);\r\n        var self = this;\r\n        // Fetch the title string.\r\n        $(selector).click(function(){\r\n            \r\n            var editid = $(this).data(\"value\");\r\n            //alert(editid);\r\n            if(typeof this.editid != 'undefined'){\r\n                    editid=0;\r\n            }\r\n             self.categoryid = editid;\r\n              //alert(self.courseid);\r\n            return Str.get_string('categorypopup', 'local_courses').then(function(title) {\r\n                // Create the modal.\r\n                return ModalFactory.create({\r\n                    type: ModalFactory.types.CANCEL,\r\n                    title: 'Category : '+this.categoryname,\r\n                    body: self.getBody()\r\n                });\r\n            }.bind(self)).then(function(modal) {\r\n                \r\n                // Keep a reference to the modal.\r\n                self.modal = modal;\r\n                self.modal.show();\r\n                // Forms are big, we want a big modal.\r\n                self.modal.setLarge();\r\n     \r\n                // We want to reset the form every time it is opened.\r\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                    self.modal.setBody('');\r\n                }.bind(this));\r\n    \r\n                // We want to hide the submit buttons every time it is opened.\r\n                self.modal.getRoot().on(ModalEvents.shown, function() {\r\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\r\n                }.bind(this));\r\n     \r\n    \r\n                // We catch the modal save event, and use it to submit the form inside the modal.\r\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\r\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\r\n                // We also catch the form submit event and use it to submit the form with ajax.\r\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\r\n                return this.modal;\r\n            }.bind(this));       \r\n        \r\n        \r\n        });\r\n        \r\n    };\r\n \r\n    /**\r\n     * @method getBody\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewPopup.prototype.getBody = function(formdata) {\r\n        if (typeof formdata === \"undefined\") {\r\n            formdata = {};\r\n        }\r\n        //alert(this.courseid);\r\n        // Get the content of the modal.\r\n        if(typeof this.categoryid != 'undefined'){\r\n            var params = {categoryid:this.categoryid, jsonformdata: JSON.stringify(formdata)};\r\n        }else{\r\n            var params = {};\r\n        }\r\n        return Fragment.loadFragment('local_courses', 'coursecategory_display', this.contextid, params);\r\n    };\r\n \r\n \r\n    return /** @alias module:local_courses/course */ {\r\n        // Public variables and functions.\r\n        /**\r\n         * Attach event listeners to initialise this module.\r\n         *\r\n         * @method init\r\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\r\n         * @param {int} contextid The contextid for the course.\r\n         * @return {Promise}\r\n         */\r\n        init: function(args) {\r\n            this.Datatable();\r\n            return new NewPopup(args.selector, args.contextid,args.categoryid,args.categoryname);\r\n        },\r\n        Datatable: function() {\r\n            \r\n        }\r\n    };\r\n});"],"file":"popup.min.js"}