{"version":3,"sources":["../src/coursestatus.js"],"names":["define","dataTable","$","Str","ModalFactory","ModalEvents","Fragment","courseStatus","args","self","init","prototype","modal","contextid","buttonname","attr","get_string","then","title","create","type","types","CANCEL","body","getBody","bind","show","setLarge","getRoot","on","hidden","destroy","console","log","loadFragment","statuspopup","load"],"mappings":"AAQAA,OAAM,8BAAC,CAAC,iCAAD,CACL,QADK,CAEL,UAFK,CAGL,oBAHK,CAIL,mBAJK,CAKL,eALK,CAML,WANK,CAOL,UAPK,CAQL,UARK,CAAD,CAQQ,SAASC,CAAT,CAAoBC,CAApB,CAAuBC,CAAvB,CAA4BC,CAA5B,CAA0CC,CAA1C,CAAuDC,CAAvD,CAA0E,CASpF,GAAIC,CAAAA,CAAY,CAAG,SAASC,CAAT,CAAc,CAChC,GAAIC,CAAAA,CAAI,CAAG,IAAX,CACGA,CAAI,CAACC,IAAL,CAAUF,CAAV,CACH,CAHD,CAKAD,CAAY,CAACI,SAAb,CAAuBC,KAAvB,CAA+B,IAA/B,CAEAL,CAAY,CAACI,SAAb,CAAuBE,SAAvB,CAAmC,CAAC,CAApC,CAEAN,CAAY,CAACI,SAAb,CAAuBD,IAAvB,CAA8B,SAASF,CAAT,CAAc,IACvCC,CAAAA,CAAI,CAAG,IADgC,CAGvCK,CAAU,CAAGZ,CAAC,CAAC,4BAAD,CAAD,CAAgCa,IAAhC,CAAqC,WAArC,CAH0B,CAI3C,MAAOZ,CAAAA,CAAG,CAACa,UAAJ,CAAe,qBAAf,CAAsC,eAAtC,CAAsDF,CAAtD,EAAkEG,IAAlE,CAAuE,SAASC,CAAT,CAAgB,CAC7F,MAAOd,CAAAA,CAAY,CAACe,MAAb,CAAoB,CACjBC,IAAI,CAAEhB,CAAY,CAACiB,KAAb,CAAmBC,MADR,CAEjBJ,KAAK,CAAEA,CAFU,CAGjBK,IAAI,CAAEd,CAAI,CAACe,OAAL,CAAahB,CAAb,CAHW,CAApB,CAMP,CAP6E,CAO5EiB,IAP4E,CAOvEhB,CAPuE,CAAvE,EAOOQ,IAPP,CAOY,SAASL,CAAT,CAAgB,CACrCH,CAAI,CAACG,KAAL,CAAaA,CAAb,CACMH,CAAI,CAACG,KAAL,CAAWc,IAAX,GAGAjB,CAAI,CAACG,KAAL,CAAWe,QAAX,GACAlB,CAAI,CAACG,KAAL,CAAWgB,OAAX,GAAqBC,EAArB,CAAwBxB,CAAW,CAACyB,MAApC,CAA4C,UAAW,CACnDrB,CAAI,CAACG,KAAL,CAAWmB,OAAX,EAEH,CAH2C,CAG1CN,IAH0C,CAGrC,IAHqC,CAA5C,CAQH,CAdkB,CAcjBA,IAdiB,CAcZ,IAdY,CAPZ,CAsBV,CA1BE,CA4BHlB,CAAY,CAACI,SAAb,CAAuBa,OAAvB,CAAiC,SAAShB,CAAT,CAAc,CAC9CwB,OAAO,CAACC,GAAR,CAAYzB,CAAZ,EACA,MAAOF,CAAAA,CAAQ,CAAC4B,YAAT,CAAsB,eAAtB,CAAuC,sBAAvC,CAA+D,CAA/D,CAAkE1B,CAAlE,CACP,CAHD,CA0BA,MAA2D,CAUvD2B,WAAW,CAAG,qBAAS3B,CAAT,CAAc,CAC3B,MAAO,IAAID,CAAAA,CAAJ,CAAiBC,CAAjB,CACP,CAZsD,CAc1D4B,IAAI,CAAG,eAAU,CAGhB,CAjByD,CAmB3D,CAnGK,CAAN","sourcesContent":["/**\r\n * Add a create new group modal to the page.\r\n *\r\n * @module     local_courses/coursestatus\r\n * @class      NewCourse\r\n * @package    local_courses\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['local_courses/jquery.dataTables',\r\n\t\t'jquery',\r\n\t\t'core/str',\r\n\t\t'core/modal_factory',\r\n\t\t'core/modal_events',\r\n\t\t'core/fragment',\r\n\t\t'core/ajax',\r\n\t\t'core/yui',\r\n\t\t'jqueryui'],function(dataTable, $, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\r\n\t/**\r\n     * Constructor\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @param {int} contextid\r\n     *\r\n     * Each call to init gets it's own instance of this class.\r\n     */\r\n    var courseStatus = function(args){\r\n    \tvar self = this;\r\n        self.init(args);\r\n    };\r\n\r\n    courseStatus.prototype.modal = null;\r\n\r\n    courseStatus.prototype.contextid = -1;\r\n\r\n    courseStatus.prototype.init = function(args){\r\n    \tvar self = this;\r\n    \t// console.log(args);\r\n    \tvar buttonname = $(\"#progressbardisplay_course\").attr('data-name');\r\n    \treturn Str.get_string('course_status_popup', 'local_courses',buttonname).then(function(title) {\r\n    \t\treturn ModalFactory.create({\r\n                type: ModalFactory.types.CANCEL,\r\n                title: title,\r\n                body: self.getBody(args)\r\n            });\r\n            \r\n    \t}.bind(self)).then(function(modal) {\r\n\t\t\tself.modal = modal;\r\n\t        self.modal.show();\r\n    \t\t\r\n\r\n\t        self.modal.setLarge();\r\n\t        self.modal.getRoot().on(ModalEvents.hidden, function() {\r\n\t            self.modal.destroy();\r\n\t            // self.modal.setBody('');\r\n\t        }.bind(this));\r\n\t        \r\n\t        // self.modal.getRoot().on(ModalEvents.shown, function() {\r\n\t        //     // self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\r\n\t        // }.bind(this));\r\n\t    }.bind(this));\r\n\t};\r\n\r\n\tcourseStatus.prototype.getBody = function(args){\r\n\t\tconsole.log(args);\r\n\t\treturn Fragment.loadFragment('local_courses', 'coursestatus_display', 1, args);\r\n\t};\r\n\t// courseStatus.prototype.statusDatatable = function(){\r\n\r\n\t// \t// var table_rows = $('#scrolltable tr');\r\n\t\t\r\n\t// \t// console.log(table_rows.length);\r\n\t// \t// alert(table_rows.length);\r\n\t// \t// if(table_rows.length>6){\t\r\n\t// \t\t$('#scrolltable').dataTable({\r\n\t// \t\t\t\"searching\": false,\r\n\t// \t\t\t\"language\": {\r\n\t//             \t\"paginate\": {\r\n\t//                 \t\"next\": \">\",\r\n\t//                 \t\"previous\": \"<\"\r\n\t//             \t}\r\n\t//         \t},\r\n\t//         \t\"pageLength\": 5,\r\n\t// \t\t});\r\n\t// \t\talert('done');\r\n\t// \t// }\r\n\t// };\r\n\r\n\r\n\treturn /** @alias module:local_evaluation/newevaluation */ {\r\n        // Public variables and functions.\r\n        /**\r\n         * Attach event listeners to initialise this module.\r\n         *\r\n         * @method init\r\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\r\n         * @param {int} contextid The contextid for the course.\r\n         * @return {Promise}\r\n         */\r\n    \tstatuspopup : function(args){\r\n    \t\treturn new courseStatus(args);\r\n    \t},\r\n    \t\r\n\t\tload : function(){\r\n    \t\t// alert('here');\r\n\r\n\t\t}\r\n\t};\r\n});\r\n"],"file":"coursestatus.min.js"}