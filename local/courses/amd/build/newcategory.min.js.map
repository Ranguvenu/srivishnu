{"version":3,"sources":["../src/newcategory.js"],"names":["define","dataTable","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","NewCategory","selector","contextid","categoryid","self","init","prototype","modal","head","get_string","then","title","create","type","types","SAVE_CANCEL","body","getBody","bind","getRoot","addClass","show","setLarge","on","hidden","setBody","animate","setTimeout","destroy","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","console","log","loadFragment","handleFormSubmissionResponse","hide","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","handleFormSubmissionFailure","data","e","preventDefault","formData","find","serialize","call","methodname","args","done","fail","submit","catgoriesTableDatatable","load"],"mappings":"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","sourcesContent":["/**\r\n * Add a create new group modal to the page.\r\n *\r\n * @module     local_courses/newcourse\r\n * @class      NewCourse\r\n * @package    local_courses\r\n * @copyright  2017 Shivani\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['local_courses/jquery.dataTables', 'jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\r\n        function(dataTable, $, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @param {int} contextid\r\n     *\r\n     * Each call to init gets it's own instance of this class.\r\n     */\r\n    var NewCategory = function(selector, contextid, categoryid) {\r\n\r\n        this.contextid = contextid;\r\n        this.categoryid = categoryid;\r\n\r\n        var self = this;\r\n        self.init(selector);\r\n    };\r\n\r\n    /**\r\n     * @var {Modal} modal\r\n     * @private\r\n     */\r\n    NewCategory.prototype.modal = null;\r\n\r\n    /**\r\n     * @var {int} contextid\r\n     * @private\r\n     */\r\n    NewCategory.prototype.contextid = -1;\r\n\r\n    /**\r\n     * Initialise the class.\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewCategory.prototype.init = function(selector) {\r\n        //var triggers = $(selector);\r\n        var self = this;\r\n        // Fetch the title string.\r\n        // $(selector).click(function(){\r\n\r\n            // var editid = $(this).data(\"value\");\r\n            // //alert(editid);\r\n            // if(typeof editid != 'undefined'){\r\n            //         editid=0;\r\n            // }\r\n            //  self.categoryid = editid;\r\n              //alert(self.courseid);\r\n            if (self.categoryid) {\r\n                var head =  Str.get_string('editcategory', 'local_courses');\r\n            }else{\r\n               var head =  Str.get_string('addcategory', 'local_courses');\r\n            }\r\n            return head.then(function(title) {\r\n                // Create the modal.\r\n                return ModalFactory.create({\r\n                    type: ModalFactory.types.SAVE_CANCEL,\r\n                    title: title,\r\n                    body: self.getBody()\r\n                });\r\n            }.bind(self)).then(function(modal) {\r\n\r\n                // Keep a reference to the modal.\r\n                self.modal = modal;\r\n                self.modal.getRoot().addClass('openLMStransition');\r\n                self.modal.show();\r\n                // Forms are big, we want a big modal.\r\n                self.modal.setLarge();\r\n\r\n                // We want to reset the form every time it is opened.\r\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                    self.modal.setBody('');\r\n                    self.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\r\n                    setTimeout(function(){\r\n                        modal.destroy();\r\n                    }, 1000);\r\n                }.bind(this));\r\n\r\n                // We want to hide the submit buttons every time it is opened.\r\n                self.modal.getRoot().on(ModalEvents.shown, function() {\r\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\r\n                }.bind(this));\r\n\r\n\r\n                // We catch the modal save event, and use it to submit the form inside the modal.\r\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\r\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\r\n                // We also catch the form submit event and use it to submit the form with ajax.\r\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\r\n                self.modal.getRoot().animate({\"right\":\"0%\"}, 500);\r\n                return this.modal;\r\n            }.bind(this));\r\n\r\n\r\n        // });\r\n\r\n    };\r\n\r\n    /**\r\n     * @method getBody\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewCategory.prototype.getBody = function(formdata) {\r\n        if (typeof formdata === \"undefined\") {\r\n            formdata = {};\r\n        }\r\n\r\n        params = {};\r\n        params.jsonformdata = JSON.stringify(formdata);\r\n        params.categoryid = this.categoryid;\r\n        console.log(params);\r\n        console.log(this);\r\n        return Fragment.loadFragment('local_courses', 'coursecategory_form', this.contextid, params);\r\n    };\r\n\r\n    /**\r\n     * @method handleFormSubmissionResponse\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewCategory.prototype.handleFormSubmissionResponse = function() {\r\n        this.modal.hide();\r\n        // We could trigger an event instead.\r\n        // Yuk.\r\n        Y.use('moodle-core-formchangechecker', function() {\r\n            M.core_formchangechecker.reset_form_dirty_state();\r\n        });\r\n        document.location.reload();\r\n    };\r\n\r\n    /**\r\n     * @method handleFormSubmissionFailure\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewCategory.prototype.handleFormSubmissionFailure = function(data) {\r\n        // Oh noes! Epic fail :(\r\n        // Ah wait - this is normal. We need to re-display the form with errors!\r\n        this.modal.setBody(this.getBody(data));\r\n    };\r\n\r\n    /**\r\n     * Private method\r\n     *\r\n     * @method submitFormAjax\r\n     * @private\r\n     * @param {Event} e Form submission event.\r\n     */\r\n    NewCategory.prototype.submitFormAjax = function(e) {\r\n        // We don't want to do a real form submission.\r\n        e.preventDefault();\r\n\r\n        // Convert all the form elements values to a serialised string.\r\n        var formData = this.modal.getRoot().find('form').serialize();\r\n        //console.log(this.contextid);\r\n        //console.log(JSON.stringify(formData));\r\n        // Now we can continue...\r\n        Ajax.call([{\r\n            methodname: 'local_courses_submit_create_category_form',\r\n            //args: {evalid:this.evalid, contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\r\n            args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\r\n            done: this.handleFormSubmissionResponse.bind(this, formData),\r\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\r\n        }]);\r\n    };\r\n\r\n    /**\r\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\r\n     *\r\n     * @method submitForm\r\n     * @param {Event} e Form submission event.\r\n     * @private\r\n     */\r\n    NewCategory.prototype.submitForm = function(e) {\r\n        e.preventDefault();\r\n        var self = this;\r\n        self.modal.getRoot().find('form').submit();\r\n    };\r\n\r\n    return /** @alias module:local_course/newcourse */ {\r\n        // Public variables and functions.\r\n        /**\r\n         * Attach event listeners to initialise this module.\r\n         *\r\n         * @method init\r\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\r\n         * @param {int} contextid The contextid for the course.\r\n         * @return {Promise}\r\n         */\r\n        init: function(args) {\r\n\r\n            return new NewCategory(args.selector, args.contextid,args.categoryid);\r\n        },\r\n        catgoriesTableDatatable: function(){\r\n            // console.log(args);\r\n            $(\"#category_tbl\").dataTable({\r\n                \"searching\": true,\r\n                \"bLengthChange\": false,\r\n                \"lengthChange\": false,\r\n                \"lengthMenu\": [5, 10, 25, 50, -1],\r\n                \"aaSorting\": [],\r\n                'language': {\r\n                    \"emptyTable\": 'No Records Found',\r\n                        \"paginate\": {\r\n                                    'previous': '<',\r\n                                    'next': '>'\r\n                                }\r\n                 }\r\n            });\r\n        },\r\n        load: function() {\r\n\r\n        }\r\n    };\r\n});"],"file":"newcategory.min.js"}