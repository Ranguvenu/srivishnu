{"version":3,"sources":["../src/paged_content_factory.js"],"names":["define","$","Templates","Notification","PagedContent","PagedContentEvents","PubSub","Ajax","TEMPLATES","PAGED_CONTENT","DEFAULT","ITEMS_PER_PAGE_SINGLE","ITEMS_PER_PAGE_ARRAY","MAX_PAGES","MAX_DISPLAY","getDefaultTemplateContext","pagingbar","pagingdropdown","skipjs","ignorecontrolwhileloading","controlplacementbottom","getDefaultPagingBarTemplateContext","showitemsperpageselector","itemsperpage","previous","next","activepagenumber","hidecontrolonsinglepage","pages","calculateNumberOfPages","numberOfItems","itemsPerPage","numberOfPages","partial","buildPagingBarTemplateContextKnownLength","isArray","context","i","page","number","active","dotclass","hiddenclass","push","buildItemsPerPagePagingBarContext","map","num","value","activeItems","filter","item","length","buildPagingBarTemplateContextUnknownLength","buildPagingBarTemplateContext","buildPagingDropdownTemplateContext","config","options","totalItems","lastIncrease","maxPages","hasOwnProperty","itemCount","option","itemcount","content","buildTemplateContext","ignoreControlWhileLoading","controlPlacementBottom","hideControlOnSinglePage","arialabels","ariaLabels","dropdown","createWithTotalAndLimit","renderPagesContentCallback","deferred","Deferred","templateContext","render","then","html","js","id","attr","eventNamespace","container","init","registerEvents","resolve","fail","exception","reject","promise","generateLimitHandler","persistentLimitKey","callback","limit","call","methodname","args","preferences","type","namespace","subscribe","SET_ITEMS_PER_PAGE_LIMIT","create","createWithLimit","createFromStaticList","contentItems","renderContentCallback","pagesData","contentToRender","forEach","pageData","begin","offset","end","items","slice","createFromAjax","resetLastPageNumber","lastPageNumber","publish","ALL_ITEMS_LOADED"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Factory to create a paged content widget.\r\n *\r\n * @module     core/paged_content_factory\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n[\r\n    'jquery',\r\n    'core/templates',\r\n    'core/notification',\r\n    'local_costcenter/paged_content',\r\n    'local_costcenter/paged_content_pages',\r\n    'core/pubsub',\r\n    'core/ajax'\r\n],\r\nfunction(\r\n    $,\r\n    Templates,\r\n    Notification,\r\n    PagedContent,\r\n    PagedContentEvents,\r\n    PubSub,\r\n    Ajax\r\n) {\r\n    var TEMPLATES = {\r\n        PAGED_CONTENT: 'local_costcenter/paged_content'\r\n    };\r\n\r\n    var DEFAULT = {\r\n        ITEMS_PER_PAGE_SINGLE: 25,\r\n        ITEMS_PER_PAGE_ARRAY: [25, 50, 100, 0],\r\n        MAX_PAGES: 3,\r\n        MAX_DISPLAY: 10\r\n    };\r\n\r\n    /**\r\n     * Get the default context to render the paged content mustache\r\n     * template.\r\n     *\r\n     * @return {object}\r\n     */\r\n    var getDefaultTemplateContext = function() {\r\n        return {\r\n            pagingbar: false,\r\n            pagingdropdown: false,\r\n            skipjs: true,\r\n            ignorecontrolwhileloading: true,\r\n            controlplacementbottom: false\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Get the default context to render the paging bar mustache template.\r\n     *\r\n     * @return {object}\r\n     */\r\n    var getDefaultPagingBarTemplateContext = function() {\r\n        return {\r\n            showitemsperpageselector: false,\r\n            itemsperpage: 35,\r\n            previous: true,\r\n            next: true,\r\n            activepagenumber: 1,\r\n            hidecontrolonsinglepage: true,\r\n            pages: []\r\n        };\r\n    };\r\n\r\n    /**\r\n     * Calculate the number of pages required for the given number of items and\r\n     * how many of each item should appear on a page.\r\n     *\r\n     * @param  {Number} numberOfItems How many items in total.\r\n     * @param  {Number} itemsPerPage  How many items will be shown per page.\r\n     * @return {Number} The number of pages required.\r\n     */\r\n    var calculateNumberOfPages = function(numberOfItems, itemsPerPage) {\r\n        var numberOfPages = 1;\r\n\r\n        if (numberOfItems > 0) {\r\n            var partial = numberOfItems % itemsPerPage;\r\n\r\n            if (partial) {\r\n                numberOfItems -= partial;\r\n                numberOfPages = (numberOfItems / itemsPerPage) + 1;\r\n            } else {\r\n                numberOfPages = numberOfItems / itemsPerPage;\r\n            }\r\n        }\r\n\r\n        return numberOfPages;\r\n    };\r\n\r\n    /**\r\n     * Build the context for the paging bar template when we have a known number\r\n     * of items.\r\n     *\r\n     * @param {Number} numberOfItems How many items in total.\r\n     * @param {Number} itemsPerPage  How many items will be shown per page.\r\n     * @return {object} Mustache template\r\n     */\r\n    var buildPagingBarTemplateContextKnownLength = function(numberOfItems, itemsPerPage) {\r\n        if (itemsPerPage === null) {\r\n            itemsPerPage = DEFAULT.ITEMS_PER_PAGE_SINGLE;\r\n        }\r\n\r\n        if ($.isArray(itemsPerPage)) {\r\n            // If we're given a total number of pages then we don't support a variable\r\n            // set of items per page so just use the first one.\r\n            itemsPerPage = itemsPerPage[0];\r\n        }\r\n\r\n        var context = getDefaultPagingBarTemplateContext();\r\n        context.itemsperpage = itemsPerPage;\r\n        var numberOfPages = calculateNumberOfPages(numberOfItems, itemsPerPage);\r\n\r\n        for (var i = 1; i <= numberOfPages; i++) {\r\n           \r\n            var page = {\r\n                number: i,\r\n                page: i,\r\n            };\r\n            // Make the first page active by default.\r\n            if (i === 1) {\r\n                page.active = true;\r\n            }\r\n            page.dotclass = false;\r\n            if(i <= 8 || i == numberOfPages){\r\n                page.hiddenclass = \"\";\r\n            }else{\r\n                page.hiddenclass = \"hidden\";\r\n            }\r\n            if(numberOfPages -1 > 8 && i == numberOfPages -1){\r\n                page.dotclass = true;\r\n            }\r\n            context.pages.push(page);\r\n        }\r\n        return context;\r\n    };\r\n\r\n    /**\r\n     * Convert the itemsPerPage value into a format applicable for the mustache template.\r\n     * The given value can be either a single integer or an array of integers / objects.\r\n     *\r\n     * E.g.\r\n     * In: [5, 10]\r\n     * out: [{value: 5, active: true}, {value: 10, active: false}]\r\n     *\r\n     * In: [5, {value: 10, active: true}]\r\n     * Out: [{value: 5, active: false}, {value: 10, active: true}]\r\n     *\r\n     * In: [{value: 5, active: false}, {value: 10, active: true}]\r\n     * Out: [{value: 5, active: false}, {value: 10, active: true}]\r\n     *\r\n     * @param {int|int[]} itemsPerPage Options for number of items per page.\r\n     * @return {int|array}\r\n     */\r\n    var buildItemsPerPagePagingBarContext = function(itemsPerPage) {\r\n        if ($.isArray(itemsPerPage)) {\r\n            // Convert the array into a format accepted by the template.\r\n            var context = itemsPerPage.map(function(num) {\r\n                if (typeof num === 'number') {\r\n                    // If the item is just a plain number then convert it into\r\n                    // an object with value and active keys.\r\n                    return {\r\n                        value: num,\r\n                        active: false\r\n                    };\r\n                } else {\r\n                    // Otherwise we assume the caller has specified things correctly.\r\n                    return num;\r\n                }\r\n            });\r\n\r\n            var activeItems = context.filter(function(item) {\r\n                return item.active;\r\n            });\r\n\r\n            // Default the first item to active if one hasn't been specified.\r\n            if (!activeItems.length) {\r\n                context[0].active = true;\r\n            }\r\n\r\n            return context;\r\n        } else {\r\n            return itemsPerPage;\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Build the context for the paging bar template when we have an unknown\r\n     * number of items.\r\n     *\r\n     * @param {Number} itemsPerPage  How many items will be shown per page.\r\n     * @return {object} Mustache template\r\n     */\r\n    var buildPagingBarTemplateContextUnknownLength = function(itemsPerPage) {\r\n        if (itemsPerPage === null) {\r\n            itemsPerPage = DEFAULT.ITEMS_PER_PAGE_ARRAY;\r\n        }\r\n\r\n        var context = getDefaultPagingBarTemplateContext();\r\n        context.itemsperpage = buildItemsPerPagePagingBarContext(itemsPerPage);\r\n        context.showitemsperpageselector = $.isArray(itemsPerPage);\r\n\r\n        return context;\r\n    };\r\n\r\n    /**\r\n     * Build the context to render the paging bar template with based on the number\r\n     * of pages to show.\r\n     *\r\n     * @param  {int|null} numberOfItems How many items are there total.\r\n     * @param  {int|null} itemsPerPage  How many items will be shown per page.\r\n     * @return {object} The template context.\r\n     */\r\n    var buildPagingBarTemplateContext = function(numberOfItems, itemsPerPage) {\r\n        if (numberOfItems) {\r\n            return buildPagingBarTemplateContextKnownLength(numberOfItems, itemsPerPage);\r\n        } else {\r\n            return buildPagingBarTemplateContextUnknownLength(itemsPerPage);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Build the context to render the paging dropdown template based on the number\r\n     * of pages to show and items per page.\r\n     *\r\n     * This control is rendered with a gradual increase of the items per page to\r\n     * limit the number of pages in the dropdown. Each page will show twice as much\r\n     * as the previous page (except for the first two pages).\r\n     *\r\n     * By default there will only be 4 pages shown (including the \"All\" option) unless\r\n     * a different number of pages is defined using the maxPages config value.\r\n     *\r\n     * For example:\r\n     * Items per page = 25\r\n     * Would render a dropdown will 4 options:\r\n     * 25\r\n     * 50\r\n     * 100\r\n     * All\r\n     *\r\n     * @param  {Number} itemsPerPage  How many items will be shown per page.\r\n     * @param  {object} config  Configuration options provided by the client.\r\n     * @return {object} The template context.\r\n     */\r\n    var buildPagingDropdownTemplateContext = function(itemsPerPage, config) {\r\n        if (itemsPerPage === null) {\r\n            itemsPerPage = DEFAULT.ITEMS_PER_PAGE_SINGLE;\r\n        }\r\n\r\n        if ($.isArray(itemsPerPage)) {\r\n            // If we're given an array for the items per page, rather than a number,\r\n            // then just use that as the options for the dropdown.\r\n            return {\r\n                options: itemsPerPage\r\n            };\r\n        }\r\n\r\n        var context = {\r\n            options: []\r\n        };\r\n\r\n        var totalItems = 0;\r\n        var lastIncrease = 0;\r\n        var maxPages = DEFAULT.MAX_PAGES;\r\n\r\n        if (config.hasOwnProperty('maxPages')) {\r\n            maxPages = config.maxPages;\r\n        }\r\n\r\n        for (var i = 1; i <= maxPages; i++) {\r\n            var itemCount = 0;\r\n\r\n            if (i <= 2) {\r\n                itemCount = itemsPerPage;\r\n                lastIncrease = itemsPerPage;\r\n            } else {\r\n                lastIncrease = lastIncrease * 2;\r\n                itemCount = lastIncrease;\r\n            }\r\n\r\n            totalItems += itemCount;\r\n            var option = {\r\n                itemcount: itemCount,\r\n                content: totalItems\r\n            };\r\n\r\n            // Make the first option active by default.\r\n            if (i === 1) {\r\n                option.active = true;\r\n            }\r\n\r\n            context.options.push(option);\r\n        }\r\n\r\n        return context;\r\n    };\r\n\r\n    /**\r\n     * Build the context to render the paged content template with based on the number\r\n     * of pages to show, items per page, and configuration option.\r\n     *\r\n     * By default the code will render a paging bar for the paging controls unless\r\n     * otherwise specified in the provided config.\r\n     *\r\n     * @param  {int|null} numberOfItems Total number of items.\r\n     * @param  {int|null|array} itemsPerPage  How many items will be shown per page.\r\n     * @param  {object} config  Configuration options provided by the client.\r\n     * @return {object} The template context.\r\n     */\r\n    var buildTemplateContext = function(numberOfItems, itemsPerPage, config) {\r\n        var context = getDefaultTemplateContext();\r\n\r\n        if (config.hasOwnProperty('ignoreControlWhileLoading')) {\r\n            context.ignorecontrolwhileloading = config.ignoreControlWhileLoading;\r\n        }\r\n\r\n        if (config.hasOwnProperty('controlPlacementBottom')) {\r\n            context.controlplacementbottom = config.controlPlacementBottom;\r\n        }\r\n\r\n        if (config.hasOwnProperty('hideControlOnSinglePage')) {\r\n            context.hidecontrolonsinglepage = config.hideControlOnSinglePage;\r\n        }\r\n\r\n        if (config.hasOwnProperty('ariaLabels')) {\r\n            context.arialabels = config.ariaLabels;\r\n        }\r\n\r\n        if (config.hasOwnProperty('dropdown') && config.dropdown) {\r\n            context.pagingdropdown = buildPagingDropdownTemplateContext(itemsPerPage, config);\r\n        } else {\r\n            context.pagingbar = buildPagingBarTemplateContext(numberOfItems, itemsPerPage);\r\n        }\r\n        return context;\r\n    };\r\n\r\n    /**\r\n     * Create a paged content widget where the complete list of items is not loaded\r\n     * up front but will instead be loaded by an ajax request (or similar).\r\n     *\r\n     * The client code must provide a callback function which loads and renders the\r\n     * items for each page. See PagedContent.init for more details.\r\n     *\r\n     * The function will return a deferred that is resolved with a jQuery object\r\n     * for the HTML content and a string for the JavaScript.\r\n     *\r\n     * The current list of configuration options available are:\r\n     *      dropdown {bool} True to render the page control as a dropdown (paging bar is default).\r\n     *      maxPages {Number} The maximum number of pages to show in the dropdown (only works with dropdown option)\r\n     *      ignoreControlWhileLoading {bool} Disable the pagination controls while loading a page (default to true)\r\n     *      controlPlacementBottom {bool} Render controls under paged content (default to false)\r\n     *\r\n     * @param  {function} renderPagesContentCallback  Callback for loading and rendering the items.\r\n     * @param  {object} config  Configuration options provided by the client.\r\n     * @return {promise} Resolved with jQuery HTML and string JS.\r\n     */\r\n    var create = function(renderPagesContentCallback, config) {\r\n        return createWithTotalAndLimit(null, null, renderPagesContentCallback, config);\r\n    };\r\n\r\n    /**\r\n     * Create a paged content widget where the complete list of items is not loaded\r\n     * up front but will instead be loaded by an ajax request (or similar).\r\n     *\r\n     * The client code must provide a callback function which loads and renders the\r\n     * items for each page. See PagedContent.init for more details.\r\n     *\r\n     * The function will return a deferred that is resolved with a jQuery object\r\n     * for the HTML content and a string for the JavaScript.\r\n     *\r\n     * The current list of configuration options available are:\r\n     *      dropdown {bool} True to render the page control as a dropdown (paging bar is default).\r\n     *      maxPages {Number} The maximum number of pages to show in the dropdown (only works with dropdown option)\r\n     *      ignoreControlWhileLoading {bool} Disable the pagination controls while loading a page (default to true)\r\n     *      controlPlacementBottom {bool} Render controls under paged content (default to false)\r\n     *\r\n     * @param  {int|array|null} itemsPerPage  How many items will be shown per page.\r\n     * @param  {function} renderPagesContentCallback  Callback for loading and rendering the items.\r\n     * @param  {object} config  Configuration options provided by the client.\r\n     * @return {promise} Resolved with jQuery HTML and string JS.\r\n     */\r\n    var createWithLimit = function(itemsPerPage, renderPagesContentCallback, config) {\r\n        return createWithTotalAndLimit(null, itemsPerPage, renderPagesContentCallback, config);\r\n    };\r\n\r\n    /**\r\n     * Create a paged content widget where the complete list of items is not loaded\r\n     * up front but will instead be loaded by an ajax request (or similar).\r\n     *\r\n     * The client code must provide a callback function which loads and renders the\r\n     * items for each page. See PagedContent.init for more details.\r\n     *\r\n     * The function will return a deferred that is resolved with a jQuery object\r\n     * for the HTML content and a string for the JavaScript.\r\n     *\r\n     * The current list of configuration options available are:\r\n     *      dropdown {bool} True to render the page control as a dropdown (paging bar is default).\r\n     *      maxPages {Number} The maximum number of pages to show in the dropdown (only works with dropdown option)\r\n     *      ignoreControlWhileLoading {bool} Disable the pagination controls while loading a page (default to true)\r\n     *      controlPlacementBottom {bool} Render controls under paged content (default to false)\r\n     *\r\n     * @param  {int|null} numberOfItems How many items are there in total.\r\n     * @param  {int|array|null} itemsPerPage  How many items will be shown per page.\r\n     * @param  {function} renderPagesContentCallback  Callback for loading and rendering the items.\r\n     * @param  {object} config  Configuration options provided by the client.\r\n     * @return {promise} Resolved with jQuery HTML and string JS.\r\n     */\r\n    var createWithTotalAndLimit = function(numberOfItems, itemsPerPage, renderPagesContentCallback, config) {\r\n        config = config || {};\r\n\r\n        var deferred = $.Deferred();\r\n        var templateContext = buildTemplateContext(numberOfItems, itemsPerPage, config);\r\n\r\n        Templates.render(TEMPLATES.PAGED_CONTENT, templateContext)\r\n            .then(function(html, js) {\r\n                html = $(html);\r\n                var id = html.attr('id');\r\n\r\n                // Set the id to the custom namespace provided\r\n                if (config.hasOwnProperty('eventNamespace')) {\r\n                    id = config.eventNamespace;\r\n                }\r\n\r\n                var container = html;\r\n\r\n                PagedContent.init(container, renderPagesContentCallback, id);\r\n\r\n                registerEvents(id, config);\r\n\r\n                deferred.resolve(html, js);\r\n                return;\r\n            })\r\n            .fail(function(exception) {\r\n                deferred.reject(exception);\r\n            })\r\n            .fail(Notification.exception);\r\n\r\n        return deferred.promise();\r\n    };\r\n\r\n    /**\r\n     * Create a paged content widget where the complete list of items is loaded\r\n     * up front.\r\n     *\r\n     * The client code must provide a callback function which renders the\r\n     * items for each page. The callback will be provided with an array where each\r\n     * value in the array is a the list of items to render for the page.\r\n     *\r\n     * The function will return a deferred that is resolved with a jQuery object\r\n     * for the HTML content and a string for the JavaScript.\r\n     *\r\n     * The current list of configuration options available are:\r\n     *      dropdown {bool} True to render the page control as a dropdown (paging bar is default).\r\n     *      maxPages {Number} The maximum number of pages to show in the dropdown (only works with dropdown option)\r\n     *      ignoreControlWhileLoading {bool} Disable the pagination controls while loading a page (default to true)\r\n     *      controlPlacementBottom {bool} Render controls under paged content (default to false)\r\n     *\r\n     * @param  {array} contentItems The list of items to paginate.\r\n     * @param  {Number} itemsPerPage  How many items will be shown per page.\r\n     * @param  {function} renderContentCallback  Callback for rendering the items for the page.\r\n     * @param  {object} config  Configuration options provided by the client.\r\n     * @return {promise} Resolved with jQuery HTML and string JS.\r\n     */\r\n    var createFromStaticList = function(contentItems, itemsPerPage, renderContentCallback, config) {\r\n        if (typeof config == 'undefined') {\r\n            config = {};\r\n        }\r\n\r\n        var numberOfItems = contentItems.length;\r\n        return createWithTotalAndLimit(numberOfItems, itemsPerPage, function(pagesData) {\r\n            var contentToRender = [];\r\n            pagesData.forEach(function(pageData) {\r\n                var begin = pageData.offset;\r\n                var end = pageData.limit ? begin + pageData.limit : numberOfItems;\r\n                var items = contentItems.slice(begin, end);\r\n                contentToRender.push(items);\r\n            });\r\n\r\n            return renderContentCallback(contentToRender);\r\n        }, config);\r\n    };\r\n\r\n    /**\r\n     * Reset the last page number for the generated paged-content\r\n     * This is used when we need a way to update the last page number outside of the getters callback\r\n     *\r\n     * @param {String} id ID of the paged content container\r\n     * @param {Int} lastPageNumber The last page number\r\n     */\r\n    var resetLastPageNumber = function(id, lastPageNumber) {\r\n        PubSub.publish(id + PagedContentEvents.ALL_ITEMS_LOADED, lastPageNumber);\r\n    };\r\n\r\n    /**\r\n     * Generate the callback handler for the page limit persistence functionality\r\n     *\r\n     * @param {String} persistentLimitKey\r\n     * @return {callback}\r\n     */\r\n    var generateLimitHandler = function(persistentLimitKey) {\r\n        var callback = function(limit) {\r\n            var args = {\r\n                preferences: [\r\n                    {\r\n                        type: persistentLimitKey,\r\n                        value: limit\r\n                    }\r\n                ]\r\n            };\r\n\r\n            var request = {\r\n                methodname: 'core_user_update_user_preferences',\r\n                args: args\r\n            };\r\n            Ajax.call([request]);\r\n        };\r\n\r\n        return callback;\r\n    };\r\n\r\n    /**\r\n     * Set up any events based on config key values\r\n     *\r\n     * @param {string} namespace The namespace for this component\r\n     * @param {object} config Config options passed to the factory\r\n     */\r\n    var registerEvents = function(namespace, config) {\r\n        if (config.hasOwnProperty('persistentLimitKey')) {\r\n            PubSub.subscribe(namespace + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT,\r\n                generateLimitHandler(config.persistentLimitKey));\r\n        }\r\n    };\r\n\r\n    return {\r\n        create: create,\r\n        createWithLimit: createWithLimit,\r\n        createWithTotalAndLimit: createWithTotalAndLimit,\r\n        createFromStaticList: createFromStaticList,\r\n        // Backwards compatibility just in case anyone was using this.\r\n        createFromAjax: createWithTotalAndLimit,\r\n        resetLastPageNumber: resetLastPageNumber\r\n    };\r\n});\r\n"],"file":"paged_content_factory.min.js"}