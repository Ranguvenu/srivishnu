{"version":3,"sources":["../src/paged_content_pages.js"],"names":["define","$","Templates","Notification","PubSub","PagedContentEvents","SELECTORS","ROOT","PAGE_REGION","ACTIVE_PAGE_REGION","TEMPLATES","PAGING_CONTENT_ITEM","LOADING","findPage","root","pageNumber","find","startLoading","deferred","Deferred","attr","render","visible","then","html","loadingSpinner","timerId","setTimeout","css","appendTo","always","clearTimeout","remove","removeAttr","fail","exception","renderPagePromise","pagePromise","pageJS","page","content","appendNodeContents","resolve","reject","promise","showPages","pagesData","id","renderPagesContentCallback","existingPages","newPageData","newPagesPromise","forEach","pageData","existingPage","length","push","promises","allItemsLoaded","lastPageNumber","publish","ALL_ITEMS_LOADED","renderPagePromises","map","index","when","apply","newPages","Array","prototype","slice","call","arguments","loadingPromise","pagesToShow","concat","addClass","removeClass","PAGES_SHOWN","init","subscribe","SHOW_PAGES","SET_ITEMS_PER_PAGE_LIMIT","empty","rootSelector"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Javascript for showing/hiding pages of content.\r\n *\r\n * @module     core/paged_content_pages\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(\r\n    [\r\n        'jquery',\r\n        'core/templates',\r\n        'core/notification',\r\n        'core/pubsub',\r\n        'core/paged_content_events'\r\n    ],\r\n    function(\r\n        $,\r\n        Templates,\r\n        Notification,\r\n        PubSub,\r\n        PagedContentEvents\r\n    ) {\r\n\r\n    var SELECTORS = {\r\n        ROOT: '[data-region=\"page-container\"]',\r\n        PAGE_REGION: '[data-region=\"paged-content-page\"]',\r\n        ACTIVE_PAGE_REGION: '[data-region=\"paged-content-page\"].active'\r\n    };\r\n\r\n    var TEMPLATES = {\r\n        PAGING_CONTENT_ITEM: 'core/paged_content_page',\r\n        LOADING: 'core/overlay_loading'\r\n    };\r\n\r\n    var PRELOADING_GRACE_PERIOD = 300;\r\n\r\n    /**\r\n     * Find a page by the number.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {Number} pageNumber The number of the page to be found.\r\n     * @returns {jQuery} The page.\r\n     */\r\n    var findPage = function(root, pageNumber) {\r\n        return root.find('[data-page=\"' + pageNumber + '\"]');\r\n    };\r\n\r\n    /**\r\n     * Show the loading spinner until the returned deferred is resolved by the\r\n     * calling code.\r\n     *\r\n     * The loading spinner is only rendered after a short grace period to avoid\r\n     * having it flash up briefly in the interface.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @returns {promise} The page.\r\n     */\r\n    var startLoading = function(root) {\r\n        var deferred = $.Deferred();\r\n        root.attr('aria-busy', true);\r\n\r\n        Templates.render(TEMPLATES.LOADING, {visible: true})\r\n            .then(function(html) {\r\n                var loadingSpinner = $(html);\r\n                // Put this in a timer to give the calling code 300 milliseconds\r\n                // to render the content before we show the loading spinner. This\r\n                // helps prevent a loading icon flicker on close to instant\r\n                // rendering.\r\n                var timerId = setTimeout(function() {\r\n                    root.css('position', 'relative');\r\n                    loadingSpinner.appendTo(root);\r\n                }, PRELOADING_GRACE_PERIOD);\r\n\r\n                deferred.always(function() {\r\n                    clearTimeout(timerId);\r\n                    // Remove the loading spinner when our deferred is resolved\r\n                    // by the calling code.\r\n                    loadingSpinner.remove();\r\n                    root.css('position', '');\r\n                    root.removeAttr('aria-busy');\r\n                    return;\r\n                });\r\n\r\n                return;\r\n            })\r\n            .fail(Notification.exception);\r\n\r\n        return deferred;\r\n    };\r\n\r\n    /**\r\n     * Render the result of the page promise in a paged content page.\r\n     *\r\n     * This function returns a promise that is resolved with the new paged content\r\n     * page.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {promise} pagePromise The promise resolved with HTML and JS to render in the page.\r\n     * @param {Number} pageNumber The page number.\r\n     * @returns {promise} The page.\r\n     */\r\n    var renderPagePromise = function(root, pagePromise, pageNumber) {\r\n        var deferred = $.Deferred();\r\n        pagePromise.then(function(html, pageJS) {\r\n            pageJS = pageJS || '';\r\n            // When we get the contents to be rendered we can pass it in as the\r\n            // content for a new page.\r\n            Templates.render(TEMPLATES.PAGING_CONTENT_ITEM, {\r\n                page: pageNumber,\r\n                content: html\r\n            })\r\n            .then(function(html) {\r\n                // Make sure the JS we got from the page promise is being added\r\n                // to the page when we render the page.\r\n                Templates.appendNodeContents(root, html, pageJS);\r\n                var page = findPage(root, pageNumber);\r\n                deferred.resolve(page);\r\n                return;\r\n            })\r\n            .fail(function(exception) {\r\n                deferred.reject(exception);\r\n            })\r\n            .fail(Notification.exception);\r\n\r\n            return;\r\n        })\r\n        .fail(function(exception) {\r\n            deferred.reject(exception);\r\n            return;\r\n        })\r\n        .fail(Notification.exception);\r\n\r\n        return deferred.promise();\r\n    };\r\n\r\n    /**\r\n     * Make one or more pages visible based on the SHOW_PAGES event. The show\r\n     * pages event provides data containing which pages should be shown as well\r\n     * as the limit and offset values for loading the items for each of those pages.\r\n     *\r\n     * The renderPagesContentCallback is provided this list of data to know which\r\n     * pages to load. E.g. the data to load 2 pages might look like:\r\n     * [\r\n     *      {\r\n     *          pageNumber: 1,\r\n     *          limit: 5,\r\n     *          offset: 0\r\n     *      },\r\n     *      {\r\n     *          pageNumber: 2,\r\n     *          limit: 5,\r\n     *          offset: 5\r\n     *      }\r\n     * ]\r\n     *\r\n     * The renderPagesContentCallback should return an array of promises, one for\r\n     * each page in the pages data, that is resolved with the HTML and JS for that page.\r\n     *\r\n     * If the renderPagesContentCallback is not provided then it is assumed that\r\n     * all pages have been rendered prior to initialising this module.\r\n     *\r\n     * This function triggers the PAGES_SHOWN event after the pages have been rendered.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {Number} pagesData The data for which pages need to be visible.\r\n     * @param {string} id A unique id for this instance.\r\n     * @param {function} renderPagesContentCallback Render pages content.\r\n     */\r\n    var showPages = function(root, pagesData, id, renderPagesContentCallback) {\r\n        var existingPages = [];\r\n        var newPageData = [];\r\n        var newPagesPromise = $.Deferred();\r\n        var shownewpage = true;\r\n        // Check which of the pages being requests have previously been rendered\r\n        // so that we only ask for new pages to be rendered by the callback.\r\n        pagesData.forEach(function(pageData) {\r\n            var pageNumber = pageData.pageNumber;\r\n            var existingPage = findPage(root, pageNumber);\r\n            if (existingPage.length) {\r\n                existingPages.push(existingPage);\r\n            } else {\r\n                newPageData.push(pageData);\r\n            }\r\n        });\r\n\r\n        if (newPageData.length && typeof renderPagesContentCallback === 'function') {\r\n            // If we have pages we haven't previously seen then ask the client code\r\n            // to render them for us by calling the callback.\r\n            var promises = renderPagesContentCallback(newPageData, {\r\n                allItemsLoaded: function(lastPageNumber) {\r\n                    PubSub.publish(id + PagedContentEvents.ALL_ITEMS_LOADED, lastPageNumber);\r\n                }\r\n            });\r\n            // After the client has finished rendering each of the pages being asked\r\n            // for then begin our rendering process to put that content into paged\r\n            // content pages.\r\n            var renderPagePromises = promises.map(function(promise, index) {\r\n                // Create our promise for when our rendering will be completed.\r\n                return renderPagePromise(root, promise, newPageData[index].pageNumber);\r\n            });\r\n            // After each of our rendering promises have been completed then we can\r\n            // give all of the new pages to the next bit of code for handling.\r\n            $.when.apply($, renderPagePromises)\r\n                .then(function() {\r\n                    var newPages = Array.prototype.slice.call(arguments);\r\n                    // Resolve the promise with the list of newly rendered pages.\r\n                    newPagesPromise.resolve(newPages);\r\n                    return;\r\n                })\r\n                .fail(function(exception) {\r\n                    newPagesPromise.reject(exception);\r\n                    return;\r\n                })\r\n                .fail(Notification.exception);\r\n        } else {\r\n            // If there aren't any pages to load then immediately resolve the promise.\r\n            newPagesPromise.resolve([]);\r\n        }\r\n\r\n        var loadingPromise = startLoading(root);\r\n        newPagesPromise.then(function(newPages) {\r\n            // Once all of the new pages have been created then add them to any\r\n            // existing pages we have.\r\n            var pagesToShow = existingPages.concat(newPages);\r\n            // Hide all existing pages.\r\n            root.find(SELECTORS.PAGE_REGION).addClass('hidden');\r\n            // Show each of the pages that were requested.;\r\n            pagesToShow.forEach(function(page) {\r\n                if (shownewpage) {\r\n                    page.removeClass('hidden');\r\n                }\r\n            });\r\n\r\n            return;\r\n        })\r\n        .then(function() {\r\n            // Let everything else know we've displayed the pages.\r\n            PubSub.publish(id + PagedContentEvents.PAGES_SHOWN, pagesData);\r\n            return;\r\n        })\r\n        .fail(Notification.exception)\r\n        .always(function() {\r\n            loadingPromise.resolve();\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Initialise the module to listen for SHOW_PAGES events and render the\r\n     * appropriate pages using the provided renderPagesContentCallback function.\r\n     *\r\n     * The renderPagesContentCallback is provided a list of data to know which\r\n     * pages to load.\r\n     * E.g. the data to load 2 pages might look like:\r\n     * [\r\n     *      {\r\n     *          pageNumber: 1,\r\n     *          limit: 5,\r\n     *          offset: 0\r\n     *      },\r\n     *      {\r\n     *          pageNumber: 2,\r\n     *          limit: 5,\r\n     *          offset: 5\r\n     *      }\r\n     * ]\r\n     *\r\n     * The renderPagesContentCallback should return an array of promises, one for\r\n     * each page in the pages data, that is resolved with the HTML and JS for that page.\r\n     *\r\n     * If the renderPagesContentCallback is not provided then it is assumed that\r\n     * all pages have been rendered prior to initialising this module.\r\n     *\r\n     * The event element is the element to listen for the paged content events on.\r\n     *\r\n     * @param {object} root The root element.\r\n     * @param {string} id A unique id for this instance.\r\n     * @param {function} renderPagesContentCallback Render pages content.\r\n     */\r\n    var init = function(root, id, renderPagesContentCallback) {\r\n        root = $(root);\r\n\r\n        PubSub.subscribe(id + PagedContentEvents.SHOW_PAGES, function(pagesData) {\r\n            showPages(root, pagesData, id, renderPagesContentCallback);\r\n        });\r\n\r\n        PubSub.subscribe(id + PagedContentEvents.SET_ITEMS_PER_PAGE_LIMIT, function() {\r\n            // If the items per page limit was changed then we need to clear our content\r\n            // the load new values based on the new limit.\r\n            root.empty();\r\n        });\r\n    };\r\n\r\n    return {\r\n        init: init,\r\n        rootSelector: SELECTORS.ROOT,\r\n    };\r\n});\r\n"],"file":"paged_content_pages.min.js"}