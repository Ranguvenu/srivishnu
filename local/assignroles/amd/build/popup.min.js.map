{"version":3,"sources":["../src/popup.js"],"names":["define","dataTable","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","NewPopup","args","contextid","self","init","selector","prototype","modal","click","roleid","data","rolename","get_string","then","title","create","type","types","CANCEL","body","getBody","done","setLarge","getRoot","on","hidden","hide","destroy","bind","cancel","show","bodyRendered","dataTableshow","DataTable","initComplete","excluded_columns","api","columns","every","column","indexOf","index","select","appendTo","header","empty","val","fn","util","escapeRegex","search","draw","unique","sort","each","d","append","formdata","params","jsonformdata","JSON","stringify","loadFragment","unassignuser","get_strings","key","component","param","s","SAVE_CANCEL","setSaveButtonText","save","e","preventDefault","confirm","console","log","userid","promise","call","methodname","window","location","href","fail","ex","Datatable","unassignConfirm"],"mappings":"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","sourcesContent":["/**\r\n * Add a create new group modal to the page.\r\n *\r\n * @module     local_courses/newcourse\r\n * @class      NewCourse\r\n * @package    local_courses\r\n * @copyright  2017 Shivani\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['local_assignroles/jquery.dataTables', 'jquery', 'core/str', 'core/modal_factory', 'core/modal_events',\r\n        'core/fragment', 'core/ajax', 'core/yui', 'jqueryui'],\r\n        function(dataTable, $, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\r\n \r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @param {int} contextid\r\n     *\r\n     * Each call to init gets it's own instance of this class.\r\n     */\r\n    var NewPopup = function(args) {\r\n        this.contextid = args.contextid;\r\n        var self = this;\r\n        self.init(args.selector);\r\n    };\r\n \r\n    /**\r\n     * @var {Modal} modal\r\n     * @private\r\n     */\r\n    NewPopup.prototype.modal = null;\r\n \r\n    /**\r\n     * @var {int} contextid\r\n     * @private\r\n     */\r\n    NewPopup.prototype.contextid = -1;\r\n \r\n    /**\r\n     * Initialise the class.\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewPopup.prototype.init = function(selector) {\r\n        //var triggers = $(selector);\r\n        var self = this;\r\n        // Fetch the title string.\r\n        $(selector).click(function(){\r\n            self.roleid = $(this).data('roleid');\r\n            self.rolename = $(this).data('rolename');\r\n\r\n            Str.get_string('assignrole', 'local_assignroles', self).then(function(title) {\r\n            \r\n                ModalFactory.create({\r\n                    type: ModalFactory.types.CANCEL,\r\n                    title: title,\r\n                    body: self.getBody()\r\n                }).done(function(modal) {\r\n                    // Keep a reference to the modal.\r\n                    self.modal = modal;\r\n          \r\n\r\n                    // Forms are big, we want a big modal.\r\n                    self.modal.setLarge();\r\n         \r\n                    // We want to reset the form every time it is opened.\r\n                    self.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                        // self.modal.setBody('');\r\n                        self.modal.hide();\r\n                        self.modal.destroy();\r\n                    }.bind(this));\r\n\r\n                    // We want to reset the form every time it is opened.\r\n                    self.modal.getRoot().on(ModalEvents.cancel, function() {\r\n                        // self.modal.setBody('');\r\n                        self.modal.hide();\r\n                        self.modal.destroy();\r\n                    }.bind(this));\r\n                    self.modal.show();\r\n\r\n                    self.modal.getRoot().on(ModalEvents.bodyRendered, function() {\r\n                         self.dataTableshow();\r\n                    }.bind(this));                                    \r\n                                  \r\n                });    \r\n\r\n            });\r\n        });\r\n                    \r\n    };\r\n    NewPopup.prototype.dataTableshow = function(){\r\n\r\n\r\n\r\n\r\n\r\n\r\n    $('#popup_user').DataTable( {\r\n        \"language\": {\r\n                    \"paginate\": {\r\n                        \"previous\": \"<\",\r\n                        \"next\": \">\"\r\n                    }\r\n        },\r\n        initComplete: function () {\r\n              var excluded_columns = [4];\r\n            this.api().columns().every( function () {\r\n                var column = this;\r\n                 if(excluded_columns.indexOf(column.index()) == -1) {\r\n\r\n                var select = $('<select><option value=\"\">--Select--</option></select>')\r\n                    .appendTo( $(column.header()).empty() )\r\n                    .on( 'change', function () {\r\n                        var val = $.fn.dataTable.util.escapeRegex(\r\n                            $(this).val()\r\n                        );\r\n                          \r\n                        column\r\n                            .search( val ? '^'+val+'$' : '', true, false )\r\n                            .draw();\r\n                    } );\r\n \r\n                column.data().unique().sort().each( function ( d, j ) {\r\n                    select.append( '<option value=\"'+d+'\">'+d+'</option>' )\r\n                } );\r\n            }\r\n            } );\r\n        }\r\n    } );\r\n\r\n\r\n       /* $('#popup_user').dataTable({\r\n            'bPaginate': true,\r\n            'bFilter': true,\r\n            'bLengthChange': true,\r\n            'lengthMenu': [\r\n                [5, 10, 25, 50, 100, -1],\r\n                [5, 10, 25, 50, 100, 'All']\r\n            ],\r\n            'language': {\r\n                'emptyTable': 'No Records Found',\r\n                'paginate': {\r\n                    'previous': '<',\r\n                    'next': '>'\r\n                }\r\n            },\r\n            'sorting': false,\r\n            'bProcessing': true,\r\n        });*/\r\n\r\n      /* $('#filter').click(function(){\r\n           var university = $('#university').val();\r\n           alert(university);\r\n           if(university != '')\r\n           {\r\n            alert(university);\r\n            $('#popup_user').DataTable().destroy();\r\n           // fill_datatable(university);        \r\n\r\n           }\r\n           \r\n          });*/\r\n        /*function fill_datatable(university = '')\r\n          {\r\n\r\n\r\n\r\n           ModalFactory.create({\r\n                    type: ModalFactory.types.CANCEL,\r\n                    title: title,\r\n                  //  body: self.getBody()\r\n                }).done(function(modal) {\r\n                    // Keep a reference to the modal.\r\n                    self.modal = modal;\r\n          \r\n\r\n                    // Forms are big, we want a big modal.\r\n                    self.modal.setLarge();\r\n         \r\n                    // We want to reset the form every time it is opened.\r\n                    self.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                        // self.modal.setBody('');\r\n                        self.modal.hide();\r\n                        self.modal.destroy();\r\n                    }.bind(this));\r\n\r\n                    // We want to reset the form every time it is opened.\r\n                    self.modal.getRoot().on(ModalEvents.cancel, function() {\r\n                        // self.modal.setBody('');\r\n                        self.modal.hide();\r\n                        self.modal.destroy();\r\n                    }.bind(this));\r\n                    self.modal.show();\r\n\r\n                    self.modal.getRoot().on(ModalEvents.bodyRendered, function() {\r\n                         self.dataTableshow();\r\n                    }.bind(this));                                    \r\n                                  \r\n                });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          /* var dataTable = $('#popup_user').DataTable({\r\n            \"processing\" : true,\r\n            \"serverSide\" : true,\r\n            \"order\" : [],\r\n            \"searching\" : false,\r\n            \"ajax\" : {\r\n             url:\"lib.php\",\r\n             type:\"POST\",\r\n             data:{\r\n             university:university\r\n             }\r\n            }\r\n           });*/\r\n         // }\r\n\r\n    };\r\n \r\n    /**\r\n     * @method getBody\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewPopup.prototype.getBody = function(formdata) {\r\n        if (typeof formdata === \"undefined\") {\r\n            formdata = {};\r\n        }\r\n        \r\n        // Get the content of the modal.\r\n        if(typeof this.roleid != 'undefined'){\r\n            var params = {roleid:this.roleid, jsonformdata: JSON.stringify(formdata)};\r\n        }else{\r\n            var params = {};\r\n        }\r\n        // console.log(params);\r\n        // alert(params);\r\n        return Fragment.loadFragment('local_assignroles', 'roleusers_display', this.contextid, params);\r\n    };\r\n    var unassignuser = function(args){\r\n        return Str.get_strings([{\r\n            key: 'confirmation',\r\n            component: 'local_assignroles',\r\n        },\r\n        {\r\n            key: 'unassignconfirm',\r\n            component: 'local_assignroles',\r\n            param :args\r\n        },\r\n        {\r\n            key: 'unassign',\r\n            component: 'local_assignroles'\r\n        }]).then(function(s) {\r\n            ModalFactory.create({\r\n                title: s[0],\r\n                type: ModalFactory.types.SAVE_CANCEL,\r\n                body: s[1]\r\n            }).done(function(modal) {\r\n                this.modal = modal;\r\n                modal.setSaveButtonText(s[2]);\r\n                modal.getRoot().on(ModalEvents.save, function(e) {\r\n                    e.preventDefault();\r\n                    args.confirm = true;\r\n                    console.log(args);\r\n                    var params = {};\r\n                    params.contextid = args.contextid;\r\n                    params.roleid = args.roleid;\r\n                    params.userid = args.userid;\r\n                    var promise = Ajax.call([{\r\n                        methodname: 'local_assignroles_unassign_role',\r\n                        args: params\r\n                    }]);\r\n                    promise[0].done(function(resp) {\r\n                        // this.modal.hide();\r\n                        // this.modal.destroy();\r\n                        window.location.href = window.location.href;\r\n                    }).fail(function(ex) {\r\n                        // do something with the exception\r\n                         console.log(ex);\r\n                    });\r\n                }.bind(this));\r\n                modal.show();\r\n            }.bind(this));\r\n        }.bind(this));\r\n    }\r\n \r\n \r\n    return /** @alias module:local_evaluation/newevaluation */ {\r\n        // Public variables and functions.\r\n        /**\r\n         * Attach event listeners to initialise this module.\r\n         *\r\n         * @method init\r\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\r\n         * @param {int} contextid The contextid for the course.\r\n         * @return {Promise}\r\n         */\r\n        init: function(args) {\r\n            this.Datatable();\r\n            return new NewPopup(args);\r\n        },\r\n        Datatable: function() {\r\n            \r\n        },\r\n        unassignConfirm: function(args) {\r\n            return unassignuser(args);\r\n        },\r\n    };\r\n});\r\n"],"file":"popup.min.js"}