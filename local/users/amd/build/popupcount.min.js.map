{"version":3,"sources":["../src/popupcount.js"],"names":["define","dataTable","$","Str","ModalFactory","ModalEvents","Fragment","NewPopup","args","contextid","id","username","moduletype","self","init","selector","prototype","modal","click","editid","data","categoryid","get_string","then","title","create","type","types","CANCEL","body","getBody","bind","show","setLarge","getRoot","on","hidden","setBody","shown","append","save","submitForm","submitFormAjax","formdata","params","jsonformdata","JSON","stringify","loadFragment","Datatable"],"mappings":"AASAA,OAAM,0BAAC,CAAC,iCAAD,CAAoC,QAApC,CAA8C,UAA9C,CAA0D,oBAA1D,CAAgF,mBAAhF,CACC,eADD,CACkB,WADlB,CAC+B,UAD/B,CAC2C,UAD3C,CAAD,CAEE,SAASC,CAAT,CAAoBC,CAApB,CAAuBC,CAAvB,CAA4BC,CAA5B,CAA0CC,CAA1C,CAAuDC,CAAvD,CAA0E,CAU9E,GAAIC,CAAAA,CAAQ,CAAG,SAASC,CAAT,CAAe,CAC1B,KAAKC,SAAL,CAAiBD,CAAI,CAACC,SAAtB,CACA,KAAKC,EAAL,CAAUF,CAAI,CAACE,EAAf,CACA,KAAKC,QAAL,CAAgBH,CAAI,CAACG,QAArB,CACA,KAAKC,UAAL,CAAkBJ,CAAI,CAACI,UAAvB,CACA,GAAIC,CAAAA,CAAI,CAAG,IAAX,CACAA,CAAI,CAACC,IAAL,CAAUN,CAAI,CAACO,QAAf,CACH,CAPD,CAaAR,CAAQ,CAACS,SAAT,CAAmBC,KAAnB,CAA2B,IAA3B,CAMAV,CAAQ,CAACS,SAAT,CAAmBP,SAAnB,CAA+B,CAAC,CAAhC,CASAF,CAAQ,CAACS,SAAT,CAAmBF,IAAnB,CAA0B,SAASC,CAAT,CAAmB,CAEzC,GAAIF,CAAAA,CAAI,CAAG,IAAX,CAEAX,CAAC,CAACa,CAAD,CAAD,CAAYG,KAAZ,CAAkB,UAAU,CAExB,GAAIC,CAAAA,CAAM,CAAGjB,CAAC,CAAC,IAAD,CAAD,CAAQkB,IAAR,CAAa,OAAb,CAAb,CAEA,GAAyB,WAAtB,QAAO,MAAKD,MAAf,CAAqC,CAC7BA,CAAM,CAAC,CACd,CACAN,CAAI,CAACQ,UAAL,CAAkBF,CAAlB,CACD,MAAOhB,CAAAA,CAAG,CAACmB,UAAJ,CAAe,WAAf,CAA4B,aAA5B,CAA0CT,CAA1C,EAAgDU,IAAhD,CAAqD,SAASC,CAAT,CAAgB,CAExE,MAAOpB,CAAAA,CAAY,CAACqB,MAAb,CAAoB,CACvBC,IAAI,CAAEtB,CAAY,CAACuB,KAAb,CAAmBC,MADF,CAEvBJ,KAAK,CAAEA,CAFgB,CAGvBK,IAAI,CAAEhB,CAAI,CAACiB,OAAL,EAHiB,CAApB,CAKV,CAP2D,CAO1DC,IAP0D,CAOrDlB,CAPqD,CAArD,EAOOU,IAPP,CAOY,SAASN,CAAT,CAAgB,CAG/BJ,CAAI,CAACI,KAAL,CAAaA,CAAb,CACAJ,CAAI,CAACI,KAAL,CAAWe,IAAX,GAEAnB,CAAI,CAACI,KAAL,CAAWgB,QAAX,GAGApB,CAAI,CAACI,KAAL,CAAWiB,OAAX,GAAqBC,EAArB,CAAwB9B,CAAW,CAAC+B,MAApC,CAA4C,UAAW,CACnDvB,CAAI,CAACI,KAAL,CAAWoB,OAAX,CAAmB,EAAnB,CACH,CAF2C,CAE1CN,IAF0C,CAErC,IAFqC,CAA5C,EAKAlB,CAAI,CAACI,KAAL,CAAWiB,OAAX,GAAqBC,EAArB,CAAwB9B,CAAW,CAACiC,KAApC,CAA2C,UAAW,CAClDzB,CAAI,CAACI,KAAL,CAAWiB,OAAX,GAAqBK,MAArB,CAA4B,uEAA5B,CACH,CAF0C,CAEzCR,IAFyC,CAEpC,IAFoC,CAA3C,EAOAlB,CAAI,CAACI,KAAL,CAAWiB,OAAX,GAAqBC,EAArB,CAAwB9B,CAAW,CAACmC,IAApC,CAA0C3B,CAAI,CAAC4B,UAAL,CAAgBV,IAAhB,CAAqBlB,CAArB,CAA1C,EAEAA,CAAI,CAACI,KAAL,CAAWiB,OAAX,GAAqBC,EAArB,CAAwB,QAAxB,CAAkC,MAAlC,CAA0CtB,CAAI,CAAC6B,cAAL,CAAoBX,IAApB,CAAyBlB,CAAzB,CAA1C,EACA,MAAO,MAAKI,KACf,CAzBkB,CAyBjBc,IAzBiB,CAyBZ,IAzBY,CAPZ,CAmCV,CA3CD,CA6CH,CAjDD,CAwDAxB,CAAQ,CAACS,SAAT,CAAmBc,OAAnB,CAA6B,SAASa,CAAT,CAAmB,CAC5C,GAAwB,WAApB,QAAOA,CAAAA,CAAX,CAAqC,CACjCA,CAAQ,CAAG,EACd,CAGD,GAAqB,WAAlB,QAAO,MAAKjC,EAAf,CAAiC,CAC7B,GAAIkC,CAAAA,CAAM,CAAG,CAAClC,EAAE,CAAC,KAAKA,EAAT,CAAaE,UAAU,CAAC,KAAKA,UAA7B,CAAyCiC,YAAY,CAAEC,IAAI,CAACC,SAAL,CAAeJ,CAAf,CAAvD,CAChB,CAFD,IAEK,CACD,GAAIC,CAAAA,CAAM,CAAG,EAChB,CAED,MAAOtC,CAAAA,CAAQ,CAAC0C,YAAT,CAAsB,aAAtB,CAAqC,0BAArC,CAAiE,KAAKvC,SAAtE,CAAiFmC,CAAjF,CACV,CAbD,CAgBA,MAA2D,CAUvD9B,IAAI,CAAE,cAASN,CAAT,CAAe,CACjB,KAAKyC,SAAL,GACA,MAAO,IAAI1C,CAAAA,CAAJ,CAAaC,CAAb,CACV,CAbsD,CAcvDyC,SAAS,CAAE,oBAAW,CAErB,CAhBsD,CAmB9D,CAnIK,CAAN","sourcesContent":["/**\r\n * Add a create new group modal to the page.\r\n *\r\n * @module     local_users/popupcount\r\n * @class      popupcount\r\n * @package    local_users\r\n * @copyright  2018 sarath\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['local_courses/jquery.dataTables', 'jquery', 'core/str', 'core/modal_factory', 'core/modal_events',\r\n        'core/fragment', 'core/ajax', 'core/yui', 'jqueryui'],\r\n        function(dataTable, $, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\r\n \r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @param {int} contextid\r\n     *\r\n     * Each call to init gets it's own instance of this class.\r\n     */\r\n    var NewPopup = function(args) {\r\n        this.contextid = args.contextid;\r\n        this.id = args.id;\r\n        this.username = args.username;\r\n        this.moduletype = args.moduletype;\r\n        var self = this;\r\n        self.init(args.selector);\r\n    };\r\n \r\n    /**\r\n     * @var {Modal} modal\r\n     * @private\r\n     */\r\n    NewPopup.prototype.modal = null;\r\n \r\n    /**\r\n     * @var {int} contextid\r\n     * @private\r\n     */\r\n    NewPopup.prototype.contextid = -1;\r\n \r\n    /**\r\n     * Initialise the class.\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewPopup.prototype.init = function(selector) {\r\n        //var triggers = $(selector);\r\n        var self = this;\r\n        // Fetch the title string.\r\n        $(selector).click(function(){\r\n            \r\n            var editid = $(this).data(\"value\");\r\n            //alert(editid);\r\n            if(typeof this.editid != 'undefined'){\r\n                    editid=0;\r\n            }\r\n             self.categoryid = editid;\r\n            return Str.get_string('usersinfo', 'local_users',self).then(function(title) {\r\n                // Create the modal.\r\n                return ModalFactory.create({\r\n                    type: ModalFactory.types.CANCEL,\r\n                    title: title,\r\n                    body: self.getBody()\r\n                });\r\n            }.bind(self)).then(function(modal) {\r\n                \r\n                // Keep a reference to the modal.\r\n                self.modal = modal;\r\n                self.modal.show();\r\n                // Forms are big, we want a big modal.\r\n                self.modal.setLarge();\r\n     \r\n                // We want to reset the form every time it is opened.\r\n                self.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                    self.modal.setBody('');\r\n                }.bind(this));\r\n    \r\n                // We want to hide the submit buttons every time it is opened.\r\n                self.modal.getRoot().on(ModalEvents.shown, function() {\r\n                    self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\r\n                }.bind(this));\r\n     \r\n    \r\n                // We catch the modal save event, and use it to submit the form inside the modal.\r\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\r\n                self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\r\n                // We also catch the form submit event and use it to submit the form with ajax.\r\n                self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\r\n                return this.modal;\r\n            }.bind(this));       \r\n        \r\n        \r\n        });\r\n        \r\n    };\r\n \r\n    /**\r\n     * @method getBody\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    NewPopup.prototype.getBody = function(formdata) {\r\n        if (typeof formdata === \"undefined\") {\r\n            formdata = {};\r\n        }\r\n        \r\n        // Get the content of the modal.\r\n        if(typeof this.id != 'undefined'){\r\n            var params = {id:this.id, moduletype:this.moduletype, jsonformdata: JSON.stringify(formdata)};\r\n        }else{\r\n            var params = {};\r\n        }\r\n\r\n        return Fragment.loadFragment('local_users', 'users_display_modulewise', this.contextid, params);\r\n    };\r\n \r\n \r\n    return /** @alias module:local_evaluation/newevaluation */ {\r\n        // Public variables and functions.\r\n        /**\r\n         * Attach event listeners to initialise this module.\r\n         *\r\n         * @method init\r\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\r\n         * @param {int} contextid The contextid for the course.\r\n         * @return {Promise}\r\n         */\r\n        init: function(args) {\r\n            this.Datatable();\r\n            return new NewPopup(args);\r\n        },\r\n        Datatable: function() {\r\n            \r\n        },\r\n        \r\n    };\r\n});"],"file":"popupcount.min.js"}