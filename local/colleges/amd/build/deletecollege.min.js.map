{"version":3,"sources":["../src/deletecollege.js"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","Y","Delcollege","selector","contextid","categoryid","coursescount","count","self","init","prototype","modal","console","log","get_string","then","title","create","type","types","DEFAULT","body","getBody","footer","getFooter","bind","setLarge","getRoot","on","hidden","animate","setTimeout","destroy","find","submitForm","hide","form","submitFormAjax","args","show","formdata","params","jsonformdata","JSON","stringify","loadFragment","handleFormSubmissionResponse","use","M","core_formchangechecker","reset_form_dirty_state","document","location","reload","$footer","handleFormSubmissionFailure","data","setBody","e","preventDefault","formData","serialize","call","methodname","done","fail","submit","load"],"mappings":"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","sourcesContent":["/**\r\n * Add a create new group modal to the page.\r\n *\r\n * @module     local_courses/newcourse\r\n * @class      NewCourse\r\n * @package    local_courses\r\n * @copyright  2017 Shivani\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events', 'core/fragment', 'core/ajax', 'core/yui'],\r\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax, Y) {\r\n \r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @param {int} contextid\r\n     *\r\n     * Each call to init gets it's own instance of this class.\r\n     */\r\n    var Delcollege = function(selector, contextid, categoryid, coursescount) {\r\n        \r\n        this.contextid = contextid;\r\n        this.categoryid = categoryid;\r\n        this.count = coursescount;\r\n        var self = this;\r\n        self.init(selector);\r\n    };\r\n \r\n    /**\r\n     * @var {Modal} modal\r\n     * @private\r\n     */\r\n    Delcollege.prototype.modal = null;\r\n \r\n    /**\r\n     * @var {int} contextid\r\n     * @private\r\n     */\r\n    Delcollege.prototype.contextid = -1;\r\n \r\n    /**\r\n     * Initialise the class.\r\n     *\r\n     * @param {String} selector used to find triggers for the new group modal.\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    Delcollege.prototype.init = function(selector) {\r\n        //var triggers = $(selector);\r\n        var self = this;\r\n        // Fetch the title string.\r\n        //$(selector).click(function(){\r\n            \r\n            //var editid = $(this).data(\"value\");\r\n            //if(typeof this.editid != 'undefined'){\r\n            //        editid=0;\r\n            //}\r\n            // self.categoryid = editid;\r\n              //alert(self.courseid);\r\n             console.log(self.categoryid);\r\n            return Str.get_string('deletecategory', 'local_courses').then(function(title) {\r\n                // Create the modal.\r\n                return ModalFactory.create({\r\n                    type: ModalFactory.types.DEFAULT,\r\n                    title: title,\r\n                    body: self.getBody(),\r\n                    footer: this.getFooter(),\r\n                });\r\n            }.bind(self)).then(function(modal) {\r\n                \r\n                // Keep a reference to the modal.\r\n               //  self.modal = modal;\r\n               //  self.modal.show();\r\n               //  // Forms are big, we want a big modal.\r\n               //  self.modal.setLarge();\r\n     \r\n               //  // We want to reset the form every time it is opened.\r\n               //  self.modal.getRoot().on(ModalEvents.hidden, function() {\r\n               //      self.modal.setBody('');\r\n               //  }.bind(this));\r\n    \r\n               //  // We want to hide the submit buttons every time it is opened.\r\n               //  self.modal.getRoot().on(ModalEvents.shown, function() {\r\n               //      self.modal.getRoot().append('<style>[data-fieldtype=submit] { display: none ! important; }</style>');\r\n               //  }.bind(this));\r\n     \r\n               //  this.modal.getFooter().find('[data-action=\"save\"]').on('click', this.submitForm.bind(this));\r\n               //  // We catch the modal save event, and use it to submit the form inside the modal.\r\n               //  // Triggering a form submission will give JS validation scripts a chance to check for errors.\r\n               // // self.modal.getRoot().on(ModalEvents.save, self.submitForm.bind(self));\r\n               //  // We also catch the form submit event and use it to submit the form with ajax.\r\n               //  self.modal.getRoot().on('submit', 'form', self.submitFormAjax.bind(self));\r\n               //  return this.modal;\r\n\r\n                // Keep a reference to the modal.\r\n                this.modal = modal;\r\n                // self.modal.show();\r\n                // Forms are big, we want a big modal.\r\n                this.modal.setLarge(); \r\n                \r\n                // this.modal.getRoot().addClass('openLMStransition local_users');\r\n\r\n                // this.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                //     this.modal.setBody('');\r\n                this.modal.getRoot().on(ModalEvents.hidden, function() {\r\n                    this.modal.getRoot().animate({\"right\":\"-85%\"}, 500);\r\n                    setTimeout(function(){\r\n                        modal.destroy();\r\n                    }, 5000);\r\n                }.bind(this));\r\n                // console.log(this.count);\r\n                \r\n                    this.modal.getFooter().find('[data-action=\"save\"]').on('click', this.submitForm.bind(this));\r\n                \r\n                // We also catch the form submit event and use it to submit the form with ajax.\r\n\r\n                // this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\r\n                //     modal.setBody('');\r\n                //     modal.hide();\r\n                this.modal.getFooter().find('[data-action=\"cancel\"]').on('click', function() {\r\n                    modal.hide();\r\n                    setTimeout(function(){\r\n                        modal.destroy();\r\n                    }, 5000);\r\n                    // modal.destroy();\r\n                });\r\n\r\n                this.modal.getRoot().on('submit', 'form', function(form) {\r\n                    self.submitFormAjax(form, self.args);\r\n                });\r\n                this.modal.show();\r\n                this.modal.getRoot().animate({\"right\":\"0%\"}, 500);\r\n\r\n                return this.modal;\r\n            }.bind(this));       \r\n        \r\n        \r\n        //});\r\n        \r\n    };\r\n \r\n    /**\r\n     * @method getBody\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    Delcollege.prototype.getBody = function(formdata) {\r\n        if (typeof formdata === \"undefined\") {\r\n            formdata = {};\r\n        }\r\n        // Get the content of the modal.\r\n        if(typeof this.categoryid != 'undefined'){\r\n            var params = {categoryid:this.categoryid, jsonformdata: JSON.stringify(formdata)};\r\n        }else{\r\n            var params = {};\r\n        }\r\n        //var params = {categoryid:this.categoryid, jsonformdata: JSON.stringify(formdata)};\r\n        return Fragment.loadFragment('local_courses', 'deletecategory_form', this.contextid, params);\r\n    };\r\n \r\n    /**\r\n     * @method handleFormSubmissionResponse\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    Delcollege.prototype.handleFormSubmissionResponse = function() {\r\n        this.modal.hide();\r\n        // We could trigger an event instead.\r\n        // Yuk.\r\n        Y.use('moodle-core-formchangechecker', function() {\r\n            M.core_formchangechecker.reset_form_dirty_state();\r\n        });\r\n        document.location.reload();\r\n    };\r\n     /**\r\n     * @method getFooter\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    Delcollege.prototype.getFooter = function() {\r\n        $footer = '';\r\n        if(this.count == 0){\r\n            $footer += '<button type=\"button\" class=\"btn btn-primary\" data-action=\"save\">Delete</button>&nbsp;';\r\n        }\r\n        $footer += '<button type=\"button\" class=\"btn btn-secondary\" data-action=\"cancel\">Cancel</button>';\r\n        return $footer;\r\n    };\r\n\r\n    /**\r\n     * @method handleFormSubmissionFailure\r\n     * @private\r\n     * @return {Promise}\r\n     */\r\n    Delcollege.prototype.handleFormSubmissionFailure = function(data) {\r\n        // Oh noes! Epic fail :(\r\n        // Ah wait - this is normal. We need to re-display the form with errors!\r\n        this.modal.setBody(this.getBody(data));\r\n    };\r\n \r\n    /**\r\n     * Private method\r\n     *\r\n     * @method submitFormAjax\r\n     * @private\r\n     * @param {Event} e Form submission event.\r\n     */\r\n    Delcollege.prototype.submitFormAjax = function(e) {\r\n        // We don't want to do a real form submission.\r\n        e.preventDefault();\r\n \r\n        // Convert all the form elements values to a serialised string.\r\n        var formData = this.modal.getRoot().find('form').serialize();\r\n        //console.log(this.contextid);\r\n        // console.log(formData);\r\n        // Now we can continue...\r\n        Ajax.call([{\r\n            methodname: 'local_courses_submit_delete_category_form',\r\n            //args: {evalid:this.evalid, contextid: this.contextid, jsonformdata: JSON.stringify(formData)},\r\n            args: {contextid: this.contextid, jsonformdata: JSON.stringify(formData),categoryid:this.categoryid},\r\n            done: this.handleFormSubmissionResponse.bind(this, formData),\r\n            fail: this.handleFormSubmissionFailure.bind(this, formData)\r\n        }]);\r\n    };\r\n \r\n    /**\r\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\r\n     *\r\n     * @method submitForm\r\n     * @param {Event} e Form submission event.\r\n     * @private\r\n     */\r\n    Delcollege.prototype.submitForm = function(e) {\r\n        e.preventDefault();\r\n        var self = this;\r\n        self.modal.getRoot().find('form').submit();\r\n    };\r\n \r\n    return /** @alias module:local_evaluation/newevaluation */ {\r\n        // Public variables and functions.\r\n        /**\r\n         * Attach event listeners to initialise this module.\r\n         *\r\n         * @method init\r\n         * @param {string} selector The CSS selector used to find nodes that will trigger this module.\r\n         * @param {int} contextid The contextid for the course.\r\n         * @return {Promise}\r\n         */\r\n        init: function(args) {\r\n            return new Delcollege(args.selector, args.contextid,args.categoryid,args.count);\r\n        },\r\n        load: function() {\r\n        }\r\n    };\r\n});\r\n"],"file":"deletecollege.min.js"}